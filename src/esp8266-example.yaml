substitutions:
  device_name: "powmr-inverter"
  node_name: "PowMr Inverter"
  node_id: powmr_inverter
  tx_pin: GPIO15
  rx_pin: GPIO13

esphome:
  name: "${device_name}"
  friendly_name: "${node_name}"
  comment: "Monitor and control a PowMr inverter via RS232"
  platform: ESP8266
  board: d1_mini
  includes:
    - "${device_name}"
  project:
    name: "odya.esphome-powmr-inverter"
    version: 1.0.0

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${node_name} Fallback"
    password: !secret ap_password

# captive_portal:

ota:
  id: "${node_id}_ota"
  password: !secret ota_password

api:
  reboot_timeout: 10min
  encryption:
    key: !secret api_encryption_key

# web_server:
#   port: 80
#   ota: true

logger:
  level: WARN
  baud_rate: 0
  hardware_uart: UART1
  esp8266_store_log_strings_in_flash: false

# mqtt:
#   broker: !secret mqtt_host
#   username: !secret mqtt_user
#   password: !secret mqtt_pass
#   topic_prefix: "esphome/${node_id}"
#   discovery: false
#   id: "${node_id}"

uart:
  id: uart_0
  baud_rate: 2400
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}
  # debug:
  #   direction: BOTH
  #   dummy_receiver: false

modbus:
  - id: modbus0
    uart_id: uart_0
    send_wait_time: 500ms

modbus_controller:
  - id: smg_inverter
    address: 0x05
    modbus_id: modbus0
    command_throttle: 600ms
    update_interval: 10s

debug:
  update_interval: 10s

sensor:
  - platform: debug
    free:
      name: "${node_name} Heap Free"

  - platform: uptime
    name: "${node_name} Uptime"
    device_class: duration
    update_interval: 60s
  - platform: wifi_signal
    name: "${node_name} RSSI"
    entity_category: "diagnostic"
    update_interval: 60s

  ###################################
  # Read first group (44 registers) #
  ###################################

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "AC Voltage"
    address: 4502
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "AC Frequency"
    address: 4503
    register_count: 3
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "PV Voltage (?)"
  #   address: 4504
  #   register_type: holding
  #   value_type: U_WORD
  #   unit_of_measurement: "V"
  #   device_class: voltage
  #   state_class: measurement
  #   accuracy_decimals: 1
  #   lambda: |-
  #     return swapBytes(x);
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Charging"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4505
  #   register_type: holding
  #   value_type: U_WORD
  #   # register_count: 11
  #   lambda: |-
  #     return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Voltage"
    address: 4506
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery SoC"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: battery
    address: 4507
    register_type: holding
    value_type: U_WORD
    state_class: measurement
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Charge Current"
    address: 4508
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Discharge Current"
    address: 4509
    register_count: 3
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Load Voltage"
  #   address: 4510
  #   register_type: holding
  #   value_type: U_WORD
  #   unit_of_measurement: "V"
  #   device_class: voltage
  #   state_class: measurement
  #   accuracy_decimals: 1
  #   lambda: |-
  #     return swapBytes(x);
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Load Frequency"
  #   address: 4511
  #   register_type: holding
  #   value_type: U_WORD
  #   unit_of_measurement: "Hz"
  #   device_class: frequency
  #   state_class: measurement
  #   accuracy_decimals: 1
  #   lambda: |-
  #     return swapBytes(x);
  #   filters:
  #     - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Power"
    address: 4512
    register_count: 2
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Load VA"
  #   address: 4513
  #   register_type: holding
  #   value_type: U_WORD
  #   unit_of_measurement: "VA"
  #   device_class: apparent_power
  #   state_class: measurement
  #   accuracy_decimals: 0
  #   lambda: |-
  #     return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Percent"
    address: 4514
    register_count: 21
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    lambda: |-
      return swapBytes(x);

  # 4516 -> binary

  # 4535 -> binary

  # 4536 -> text

  # 4537 -> text

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Target Output Frequency"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4540
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Max Total Charging Current"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4541
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Target Output Voltage"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4542
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Max Utility Charging Current"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4543
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Back To Utility Source Voltage"
  #   filters:
  #     - multiply: 0.1
  #   accuracy_decimals: 1
  #   entity_category: diagnostic
  #   address: 4544
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Back To Battery Source Voltage"
  #   filters:
  #     - multiply: 0.1
  #   accuracy_decimals: 1
  #   entity_category: diagnostic
  #   address: 4545
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # ####################################
  # # Read second group (16 registers) #
  # ####################################

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Bulk Charging Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4546
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Floating Charging Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4547
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Low CutOff Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4548
    register_count: 5
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Battery Equalization Voltage"
  #   filters:
  #     - multiply: 0.1
  #   accuracy_decimals: 1
  #   entity_category: diagnostic
  #   address: 4549
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Battery Equalized Time"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4550
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Battery Equalized Timeout"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4551
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Equalization Interval"
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
  #   address: 4552
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

  # 4553 -> binary

  # 4554 -> binary

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Charger Status" # Off/Idle/Charging
  #   address: 4555
  #   register_type: holding
  #   value_type: U_WORD
  #   lambda: |-
  #     return swapBytes(x);

binary_sensor:

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Record Fault Code"
  #   entity_category: diagnostic
  #   address: 4535
  #   register_type: holding
  #   bitmask: 0x1

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Battery Equalization"
  #   entity_category: diagnostic
  #   address: 4535
  #   register_type: holding
  #   bitmask: 0x2

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Equalization Activated Immediately"
  #   entity_category: diagnostic
  #   address: 4535
  #   register_type: holding
  #   bitmask: 0x4

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Alarm"
  #   entity_category: diagnostic
  #   address: 4535
  #   register_type: holding
  #   bitmask: 0x100
  #   # filters:
  #   #   - invert:

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Backlight"
  #   entity_category: diagnostic
  #   address: 4535
  #   register_type: holding
  #   bitmask: 0x400

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Restart On Overload"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x800

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Restart On Overheat"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x1000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Beep On Primary Source Fail"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x2000

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Return To Default Screen"
  #   entity_category: diagnostic
  #   address: 4535
  #   register_type: holding
  #   bitmask: 0x4000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Overload Bypass"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x8000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Enabled"
    entity_category: diagnostic
    address: 4553
    register_type: holding
    bitmask: 0x4000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "AC Active"
    entity_category: diagnostic
    address: 4554
    register_type: holding
    bitmask: 0x8000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "On Battery"
    entity_category: diagnostic
    address: 4554
    register_type: holding
    bitmask: 0x1

text_sensor:

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    id: charger_source_priority_text
    name: "Charger Source Priority"
    entity_category: diagnostic
    address: 4536
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      updateUnknownSelect(sensorIndex, id(charger_source_priority_select));
      switch (sensorIndex) {
        case 0: return std::string("Utility first");
        case 1: return std::string("Solar first");
        case 2: return std::string("Solar and Utility");
        case 3: return std::string("Only solar");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Output Source Priority"
    entity_category: diagnostic
    address: 4537
    register_count: 3
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      updateUnknownSelect(sensorIndex, id(output_source_priority_select));
      switch (sensorIndex) {
        case 0: return std::string("Utility first (USB)");
        case 1: return std::string("Solar first (SUB)");
        case 2: return std::string("SBU priority");
        default: return std::string(x);
      }

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "AC Input Voltage Range"
  #   entity_category: diagnostic
  #   address: 4538
  #   register_type: holding
  #   response_size: 2
  #   raw_encode: HEXBYTES
  #   lambda: |-
  #     uint16_t value = swapBytes(modbus_controller::word_from_hex_str(x, 0));
  #     switch (value) {
  #       case 0: return std::string("Appliances");
  #       case 1: return std::string("UPS");
  #       default: return std::string(x);
  #     }

  # - platform: modbus_controller
  #   modbus_controller_id: smg_inverter
  #   name: "Target Output Frequency"
  #   entity_category: diagnostic
  #   address: 4540
  #   register_type: holding
  #   response_size: 2
  #   raw_encode: HEXBYTES
  #   lambda: |-
  #     uint16_t value = swapBytes(modbus_controller::word_from_hex_str(x, 0));
  #     switch (value) {
  #       case 0: return std::string("50Hz");
  #       case 1: return std::string("60Hz");
  #       default: return std::string(x);
  #     }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Charger Status"
    address: 4555
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      switch (sensorIndex) {
        case 0: return std::string("Off");
        case 1: return std::string("Idle");
        case 2: return std::string("Charging");
        default: return std::string(x);
      }

select:

  - platform: modbus_controller
    name: "Buzzer Alarm"
    optimistic: true
    address: 5002
    value_type: U_WORD
    optionsmap:
      "Off": 0
      "On": 1

  - platform: modbus_controller
    name: "Beep On Primary Source Fail"
    optimistic: true
    address: 5007
    value_type: U_WORD
    optionsmap:
      "Off": 0
      "On": 1

  - platform: modbus_controller
    name: "Overload Bypass"
    optimistic: true
    address: 5009
    value_type: U_WORD
    optionsmap:
      "Off": 0
      "On": 1

  - platform: modbus_controller
    id: charger_source_priority_select
    name: "Charger Source Priority"
    optimistic: true
    address: 5017
    value_type: U_WORD
    optionsmap:
      "Utility first": 0
      "Solar first": 1
      "Solar and Utility": 2
      "Only Solar": 3

  - platform: modbus_controller
    id: output_source_priority_select
    name: "Output Source Priority"
    optimistic: true
    address: 5018
    value_type: U_WORD
    optionsmap:
      "Utility first (USB)": 0
      "Solar first (SUB)": 1
      "SBU priority": 2

  # - platform: modbus_controller
  #   name: "Max Total Charge Current"
  #   optimistic: true
  #   address: 5022
  #   value_type: U_WORD
  #   optionsmap:
  #     "10": 10
  #     "20": 20
  #     "30": 30
  #     "40": 40
  #     "50": 50
  #     "60": 60
  #     "70": 70
  #     "80": 80

  - platform: modbus_controller
    name: "Utility Charge Current"
    optimistic: true
    address: 5024
    value_type: U_WORD
    optionsmap:
      "2": 2
      "10": 10
      "20": 20
      "30": 30
      "40": 40
      "50": 50
      "60": 60
